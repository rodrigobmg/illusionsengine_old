/**
 * @file Singelton.hpp
 * @date October 1, 2009
 *
 * Singleton template class can be applied to the
 * application and subsystem classes (selectively).
 */

#ifndef ILL_SYSTEM_SINGLETON_HPP
#define ILL_SYSTEM_SINGLETON_HPP

#include <boost/assert.hpp>

#if ILL_COMPILER == ILL_COMPILER_MSVC
// Turn off warnings generated by this singleton implementation
#pragma  warning ( push )
#   pragma warning (disable : 4311)
#   pragma warning (disable : 4312)
#endif

namespace Ill
{
	namespace System
	{
		template< typename T >
		class Singleton 
		{
		public:
			Singleton()
			{
				BOOST_ASSERT( ms_Singleton == NULL );
#if defined( _MSC_VER ) && _MSC_VER < 1200	 
				int offset = (int)(T*)1 - (int)(Singleton <T>*)(T*)1;
				ms_Singleton = (T*)((int)this + offset);
#else
				ms_Singleton = static_cast< T* >( this );
#endif
			}

			virtual ~Singleton( void )
			{  
				BOOST_ASSERT( ms_Singleton != NULL );  
				ms_Singleton = NULL;  
			}

			static T& GetSingleton()
			{	
				BOOST_ASSERT( ms_Singleton != NULL );  
				return ( *ms_Singleton ); 
			}

			static T* GetSingletonPtr()
			{ 
				return ms_Singleton; 
			}


		protected:
			static T* ms_Singleton;
		};
	}
}

#if ILL_COMPILER == ILL_COMPILER_MSVC
// Turn off warnings generated by this singleton implementation
#pragma  warning ( pop )
#endif

#endif // ILL_SYSTEM_SINGLETON_HPP